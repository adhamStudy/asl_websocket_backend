🚀 Migration Commands - Ready to Copy-Paste
Here are the complete commands to deploy your ASL server to any new VPS:
📋 Prerequisites Info You'll Need:

New server IP: NEW_SERVER_IP
SSH username: root (or change accordingly)
SSH password: YOUR_PASSWORD


🔧 Complete Migration Script:
bash# ============================================
# STEP 1: Connect to new server
# ============================================
ssh root@NEW_SERVER_IP
# Enter your password when prompted

# ============================================
# STEP 2: Install Docker & Dependencies  
# ============================================
apt update && apt upgrade -y
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
apt install docker-compose git -y
systemctl start docker
systemctl enable docker
docker --version

# ============================================
# STEP 3: Clone Your Project
# ============================================
git clone https://github.com/adhamStudy/asl_websocket_backend.git
cd asl_websocket_backend

# ============================================
# STEP 4: Create SSL Certificates
# ============================================
mkdir -p ssl
openssl req -x509 -newkey rsa:2048 -keyout ssl/server.key -out ssl/server.crt -days 365 -nodes -subj "/CN=NEW_SERVER_IP"
chmod 600 ssl/server.key
chmod 644 ssl/server.crt

# ============================================
# STEP 5: Configure Firewall
# ============================================
ufw allow 22/tcp
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 8765/tcp
ufw --force enable

# ============================================
# STEP 6: Update nginx.conf for new IP
# ============================================
cat > nginx.conf << 'EOF'
events {
    worker_connections 1024;
}

http {
    upstream asl_backend {
        server asl-server:8765;
    }

    server {
        listen 80;
        server_name NEW_SERVER_IP;

        location / {
            proxy_pass http://asl_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        location /health {
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    server {
        listen 443 ssl;
        server_name NEW_SERVER_IP;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
        ssl_prefer_server_ciphers off;

        location / {
            proxy_pass http://asl_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        location /health {
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
EOF

# ============================================
# STEP 7: Fix IP in nginx config
# ============================================
sed -i 's/NEW_SERVER_IP/ACTUAL_IP_HERE/g' nginx.conf

# ============================================
# STEP 8: Deploy Application
# ============================================
docker-compose up -d --build

# ============================================
# STEP 9: Verify Deployment
# ============================================
docker-compose ps
curl http://ACTUAL_IP_HERE/health
docker-compose logs -f asl-server

📝 Quick Migration Checklist:
Before Migration:

✅ Get new server credentials
✅ Update your Flutter app with new IP
✅ Backup any important data

After Migration:

✅ Test: curl http://NEW_IP/health
✅ Test: WebSocket connection from Flutter
✅ Update DNS records (if using domain)
✅ Update firewall rules if needed


📱 Update Your Flutter App:
dart// Change this in your Flutter app:
final wsUrl = 'ws://NEW_SERVER_IP:80';        // HTTP
final wsUrl = 'wss://NEW_SERVER_IP:443';      // HTTPS

🛠️ One-Line Migration Script:
Save this as migrate.sh:
bash#!/bin/bash
echo "🚀 ASL Server Migration Script"
echo "Enter new server IP:"
read NEW_IP
echo "Migrating to: $NEW_IP"

# All the commands above but with $NEW_IP variable
apt update && apt upgrade -y
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
apt install docker-compose git -y
systemctl start docker && systemctl enable docker
git clone https://github.com/adhamStudy/asl_websocket_backend.git
cd asl_websocket_backend
mkdir -p ssl
openssl req -x509 -newkey rsa:2048 -keyout ssl/server.key -out ssl/server.crt -days 365 -nodes -subj "/CN=$NEW_IP"
chmod 600 ssl/server.key && chmod 644 ssl/server.crt
ufw allow 22/tcp && ufw allow 80/tcp && ufw allow 443/tcp && ufw allow 8765/tcp && ufw --force enable
sed -i "s/31.97.192.169/$NEW_IP/g" nginx.conf
docker-compose up -d --build
echo "✅ Migration complete! Test: curl http://$NEW_IP/health"
Usage:
bashchmod +x migrate.sh
./migrate.sh
🎯 Migration Time:

Preparation: 2 minutes
Server setup: 5-10 minutes
Testing: 2 minutes
Total: ~15 minutes

Your ASL server will be portable to any VPS with these commands! 🚀RetryClaude can make mistakes. Please double-check responses.Research Sonnet 4